<%
var root = "home";
var root_dir, utils;
var widgetPath = '../lib/components/';
var modulePath = '../lib/modules/';
var urlPrefix;

var db, result;

var log = new Log();

  
  var result;
  var requestedController;
  var whitelistedURI = ["assets", "lib"]
  var controllerPath;

  var originalURI = request.getRequestURI();
  var uriMatcher = new URIMatcher(originalURI);

  utils = require('initializers/utils.js')
  urlPrefix = utils.relativePrefix(originalURI);

  require_db = require('config.jag');
  db = require_db.db_connect

  /*** Include core Modules  **/
  include(modulePath + 'auth/login.jag')

  /*** /Include core Modules  **/

  //current_url = originalURI;

  //Identifying the correct controller
  //for root
  if(uriMatcher.match('/{dirr}/{+any}')){
    vars = uriMatcher.elements();
    root_dir = vars.dirr
  }

  var ContextPath = request.getContextPath()

  var splitedURI = originalURI.split("/");
  splitedURI.push("", "", "")

  if(splitedURI[2] == ""){
    requestedController = "../controllers/" + root + '_controller.jag'
  }
  else{
    setController()
  }
  
  function setController(){
    
    var assetsURI
    var isWhitelisted = false

    for each (var item in whitelistedURI) {
      if(originalURI.match('(.*)(' + item + ')(\/)(.*)')){
        assetsURI = originalURI.replace(new RegExp('(.*)(' + item + ')(\/)(.*)'), '$2$3$4')
        requestedController = "../" + assetsURI
        isWhitelisted = true
        break;
      }
    }

    isWhitelisted == false ? requestedController = findController() : ""
  
    return requestedController

  }// setController

  function findController(){
    var path = [
            '/controllers/' + splitedURI[2] + "_controller.jag",
            '/controllers/' + splitedURI[2] + "/" + splitedURI[3] + "_controller.jag"
            ]
    for (var i = 0; i < path.length; i++) {
      
      var file = new File(path[i]);
      
      if (file.isExists()) {
        return path[i];
        break;
      }

    };

  }// findController

  //include the controller
  try{
    log.info("x")
    requestedController != undefined ? include_once(requestedController) : ""
    //print(requestedController + '<br>')
  }catch(e){
    print(e.toString());
  }
  


%>